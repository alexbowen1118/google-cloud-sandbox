Index: src/api/src/Domain/UbidotsAPI.php
===================================================================
diff --git a/src/api/src/Domain/UbidotsAPI.php b/src/api/src/Domain/UbidotsAPI.php
deleted file mode 100644
--- a/src/api/src/Domain/UbidotsAPI.php	(revision 4d2724eb7be00d94f60f4a51d9a4e0bf6da52602)
+++ /dev/null	(revision 4d2724eb7be00d94f60f4a51d9a4e0bf6da52602)
@@ -1,43 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace DPR\API\Domain;
-
-use \Ubidots\ApiClient;
-
-/**
- * Description of UbidotsAPI
- *
- * @author ignacioxd
- */
-class UbidotsAPI
-{
-    private $ubidotsSettings = null;
-    private $apiClient = null;
-
-    public function __construct(array $ubidotsSettings)
-    {
-        $this->ubidotsSettings = $ubidotsSettings;
-        $this->apiClient = new ApiClient($apikey = $this->ubidotsSettings['api_key']);
-    }
-
-    function getDevices()
-    {
-        //Update as needed
-        try {
-            return ['device 1', 'device 2'];
-            //$this->apiClient->get_datasources();
-        } catch (\Exception $e) {
-            throw new UbidotsException($e->getMessage(), $e->getCode(), $e);
-        }
-    }
-}
-
-class UbidotsException extends \Exception
-{
-    function __construct($message = '', $code = 0, $previous = null)
-    {
-        parent::__construct('Ubidots API Error: ' . $message, $code, $previous);
-    }
-}
Index: src/dev.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># General\r\nDEFAULT_HOSTNAME=auth.dpr.ncparks\r\nDEPLOY_TYPE=dev\r\n\r\n\r\nMYSQL_ROOT_PASSWORD=password2\r\n#MYSQL_DATABASE=\r\nMYSQL_USER=ncparks\r\nMYSQL_PASSWORD=password2\r\n\r\nDB_ENGINE=mysql\r\nDB_HOST=mariadb\r\nDB_PORT=3306\r\n#DB_NAME=\r\nDB_USER=root\r\nDB_PASSWORD=password2\r\nDB_CHARSET=utf8mb4\r\n\r\n# AWS Credentials for S3 usage\r\n# AWS Credentials profile used for FileFinder\r\nAWS_CREDENTIALS_PROFILE=default\r\n# Region where the S3 bucket exists\r\nAWS_S3_BUCKET_REGION=us-east-1\r\n# Name of the AWS S3 bucket\r\nAWS_S3_BUCKET=filefinder-ncparks\r\n# S3 API Version - Latest is 2006-03-01, that is being used currently\r\nAWS_S3_API_VERSION=2006-03-01\r\n\r\n#XDEBUG\r\nXDEBUG_MODES=develop,debug,coverage\r\nXDEBUG_LOG_LEVEL=0\r\n\r\nDPR_API_BASE=http://localhost/api\r\n\r\n#UBIDOTS\r\nUBIDOTS_DATASOURCES_URL=https://iot.seeinsights.com/api/v1.6/datasources\r\nUBIDOTS_API_KEY=BBFF-1IJNxMPRiNoNvccDiaTJNbaN7adnb4
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dev.env b/src/dev.env
--- a/src/dev.env	(revision 4d2724eb7be00d94f60f4a51d9a4e0bf6da52602)
+++ b/src/dev.env	(date 1676995496807)
@@ -34,4 +34,8 @@
 
 #UBIDOTS
 UBIDOTS_DATASOURCES_URL=https://iot.seeinsights.com/api/v1.6/datasources
-UBIDOTS_API_KEY=BBFF-1IJNxMPRiNoNvccDiaTJNbaN7adnb4
\ No newline at end of file
+UBIDOTS_API_KEY=BBFF-1IJNxMPRiNoNvccDiaTJNbaN7adnb4
+
+#GOOGLE CLOUD
+GOOGLE_CLOUD_PROJECT = ringed-marker-378116
+GOOGLE_APPLICATION_CREDENTIALS = /secrets/gcloud_keyfile.json
\ No newline at end of file
Index: .idea/sqldialects.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sqldialects.xml b/.idea/sqldialects.xml
new file mode 100644
--- /dev/null	(date 1676480989171)
+++ b/.idea/sqldialects.xml	(date 1676480989171)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="SqlDialectMappings">
+    <file url="file://$PROJECT_DIR$/src/db/db_schema/ncparks.sql" dialect="MariaDB" />
+  </component>
+</project>
\ No newline at end of file
Index: src/api/src/Domain/Ubidots/UbidotsAPI.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\ndeclare(strict_types=1);\r\n\r\nnamespace DPR\\API\\Domain\\Ubidots;\r\n\r\nuse DPR\\API\\Domain\\Models\\Device;\r\nuse DPR\\API\\Domain\\Models\\Visit;\r\nuse DPR\\API\\Infrastructure\\Persistence\\DAO\\DAOFactory;\r\nuse DPR\\API\\Infrastructure\\Persistence\\DAO\\DeviceDAO;\r\nuse Exception;\r\n\r\n/**\r\n * Description of UbidotsAPI\r\n *\r\n * @author ignacioxd\r\n * @author Alex Bowen\r\n */\r\nclass UbidotsAPI\r\n{\r\n    //settings\r\n    private $directory = null;\r\n    private $ubidotsSettings = null;\r\n    private $apikey = null;\r\n    private $datasources_url = null;\r\n    private $par_dev_ids = [];\r\n\r\n    public function __construct(array $ubidotsSettings)\r\n    {\r\n        $this->ubidotsSettings = $ubidotsSettings;\r\n        $this->apikey = $ubidotsSettings['apikey'];\r\n        $this->datasources_url = $ubidotsSettings['datasources_url'];\r\n    }\r\n\r\n    /**\r\n     * SeeInsights GET calls\r\n     * @param string $datatype , \"d\" for devices or \"v\" for visits\r\n     * @return data\r\n     */\r\n    public function fetchLegacyUbidotsData(string $datatype): array\r\n    {\r\n        //datasources\r\n        $raw_datasources = [];\r\n        $datasources = [];\r\n\r\n        //variables\r\n        $raw_variables = [];\r\n\r\n        //visits\r\n        $raw_visits = [];\r\n\r\n        //data\r\n        $visits = [];\r\n        $devices = [];\r\n        $data = [];\r\n\r\n        /** datasources API calls */\r\n        //curl to GET ubidots datasources\r\n        $ch = curl_init();\r\n        $headers = array();\r\n        $headers[] = \"x-auth-token: $this->apikey\";\r\n        curl_setopt($ch, CURLOPT_HEADER, 0);\r\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);            // No header in the result\r\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Return, do not echo result\r\n        //raw data\r\n        curl_setopt($ch, CURLOPT_URL, $this->datasources_url);\r\n        $raw_datasources = curl_exec($ch);\r\n        $raw_datasources = json_decode($raw_datasources, true);\r\n\r\n        //create array of datasources going through every page\r\n        while($raw_datasources) {\r\n            foreach ($raw_datasources['results'] as $item) {\r\n                $datasources[] = $item;\r\n            }\r\n            //go to next page\r\n            curl_setopt($ch, CURLOPT_URL, $raw_datasources[\"next\"]);\r\n            $raw_datasources = curl_exec($ch);\r\n            if (!is_bool($raw_datasources)) {\r\n                $raw_datasources = json_decode($raw_datasources, true);\r\n            }\r\n        }\r\n\r\n        /**  if returning device models */\r\n        if ($datatype == \"d\") {\r\n            //create device models\r\n            for ($i = 0; $i < count($datasources); $i++) {\r\n\r\n                //datasource for this device\r\n                $d = $datasources[$i];\r\n\r\n                /** parsing **/\r\n                //parse name into usable park id and dev function\r\n                $parsedname = explode(\"-\", $d['name']);\r\n                $par_id = \"\";\r\n                $dev_function = \"\";\r\n                if (count($parsedname) == 5) {\r\n                    $par_id = $parsedname[2];\r\n                    $dev_function = $parsedname[4];\r\n                    if (strcmp($dev_function, \"Car\") == 0) {\r\n                        $dev_function = 1;\r\n                    }\r\n                    elseif (strcmp($dev_function, \"Trail\") == 0) {\r\n                        $dev_function = 2;\r\n                    }\r\n                } else {\r\n                    continue;\r\n                }\r\n                //parse date from created-at\r\n                $dev_date_uploaded = substr($d['created_at'], 0, 10);\r\n                //parse latitude and longitude\r\n                $dev_lat = 0;\r\n                $dev_lon = 0;\r\n                if ($d['position']) {\r\n                    $dev_lat = (float)$d['position']['lat'];\r\n                    $dev_lon = (float)$d['position']['lng'];\r\n                }\r\n                $dev_status = 1;\r\n                if(!$d['is_active']){\r\n                    $dev_status = 0;\r\n                }\r\n\r\n                //create device model\r\n                $devices[] = new Device(array(\r\n                    'dev_id' => NULL,\r\n                    'dev_par_id' => $par_id,\r\n                    'dev_number' => $d['label'],\r\n                    'dev_name' => $d['name'],\r\n                    'dev_function' => $dev_function,\r\n                    'dev_type' => 4,\r\n                    'dev_method' => 2,\r\n                    'dev_model' => 3,\r\n                    'dev_brand' => 2,\r\n                    'dev_multiplier' => 1.0,\r\n                    'dev_lat' => $dev_lat,\r\n                    'dev_lon' => $dev_lon,\r\n                    'dev_seeinsight_id' => $d['id'],\r\n                    'dev_status' => $dev_status,\r\n                    'dev_date_uploaded' => $dev_date_uploaded . \" 00:00:00\"\r\n                ));\r\n            }\r\n            //close curl\r\n            curl_close($ch);\r\n            $data = $devices;\r\n\r\n            /**  if returning visit models */\r\n        } elseif ($datatype == \"v\") {\r\n\r\n            //create visit models for all visits on each device\r\n            for ($i = 0; $i < count($datasources); $i++) {\r\n\r\n                //datasource for this device\r\n                $d = $datasources[$i];\r\n                $hourly_data_url = null;\r\n                $raw_variables = null;\r\n\r\n                //parse name into usable park id and dev function\r\n                $parsedname = explode(\"-\", $d['name']);\r\n                $par_id = null;\r\n                if (count($parsedname) == 5) {\r\n                    $par_id = $parsedname[2];\r\n                } else {\r\n                    continue;\r\n                }\r\n\r\n                /** variables API call */\r\n                //GET the variables for this device\r\n                curl_setopt($ch, CURLOPT_URL, $d['variables_url']);\r\n                $raw_variables = curl_exec($ch);\r\n                $raw_variables = json_decode($raw_variables, true);\r\n\r\n                if (!array_key_exists(8, $raw_variables[\"results\"])) {\r\n                    continue;\r\n                }\r\n\r\n                if ($hourly_data_url = $raw_variables[\"results\"][8][\"values_url\"]) {\r\n                    /** visit API calls */\r\n                    //GET first result for hourly visitation data\r\n                    curl_setopt($ch, CURLOPT_URL, $hourly_data_url);\r\n                    $raw_visits = curl_exec($ch);\r\n                    $raw_visits = json_decode($raw_visits, true);\r\n                    //take API calls through all next pages to create remaining visit models\r\n                    while ($raw_visits) {\r\n                        //for each visit on the page\r\n                        foreach ($raw_visits[\"results\"] as $result) {\r\n                            //if value > 0, make model\r\n                            if ($result['value'] > 0) {\r\n                                //make visit model\r\n                                $visits[] = new Visit(array(\r\n                                    'vis_id' => NULL,\r\n                                    'vis_par_id' => $par_id,\r\n                                    'vis_dev_id' => NULL,\r\n                                    'vis_timestamp' => $result['timestamp'],\r\n                                    'vis_count' => $result['value'],\r\n                                    'vis_count_calculated' => $result['value'],\r\n\r\n                                    /** Temporarily sends seeinsight id */\r\n                                    'vis_comments' => $d['id'],\r\n\r\n                                    'vis_status' => 1\r\n                                ));\r\n                            }\r\n                        }\r\n\r\n                        //go to next page\r\n                        curl_setopt($ch, CURLOPT_URL, $raw_visits[\"next\"]);\r\n                        $raw_visits = curl_exec($ch);\r\n                        if (!is_bool($raw_visits)) {\r\n                            $raw_visits = json_decode($raw_visits, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            //close curl\r\n            curl_close($ch);\r\n            $data = $visits;\r\n        }\r\n        return $data;\r\n    }\r\n}\r\n\r\nclass UbidotsException extends Exception\r\n{\r\n    function __construct($message = '', $code = 0, $previous = null)\r\n    {\r\n        parent::__construct('Ubidots API Error: ' . $message, $code, $previous);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/api/src/Domain/Ubidots/UbidotsAPI.php b/src/api/src/Domain/Ubidots/UbidotsAPI.php
--- a/src/api/src/Domain/Ubidots/UbidotsAPI.php	(revision 4d2724eb7be00d94f60f4a51d9a4e0bf6da52602)
+++ b/src/api/src/Domain/Ubidots/UbidotsAPI.php	(date 1676994317248)
@@ -143,7 +143,6 @@
 
             /**  if returning visit models */
         } elseif ($datatype == "v") {
-
             //create visit models for all visits on each device
             for ($i = 0; $i < count($datasources); $i++) {
 
@@ -153,7 +152,12 @@
                 $raw_variables = null;
 
                 //parse name into usable park id and dev function
-                $parsedname = explode("-", $d['name']);
+                if($d['name']){
+                    $parsedname = explode("-", $d['name']);
+                } else {
+                    continue;
+                }
+
                 $par_id = null;
                 if (count($parsedname) == 5) {
                     $par_id = $parsedname[2];
@@ -167,16 +171,24 @@
                 $raw_variables = curl_exec($ch);
                 $raw_variables = json_decode($raw_variables, true);
 
-                if (!array_key_exists(8, $raw_variables["results"])) {
-                    continue;
+                if ($raw_variables["results"]) {
+                    if (!array_key_exists(8, $raw_variables["results"])) {
+                        continue;
+                    }
                 }
+                else{
+                    continue;
+                }
 
                 if ($hourly_data_url = $raw_variables["results"][8]["values_url"]) {
                     /** visit API calls */
                     //GET first result for hourly visitation data
                     curl_setopt($ch, CURLOPT_URL, $hourly_data_url);
                     $raw_visits = curl_exec($ch);
-                    $raw_visits = json_decode($raw_visits, true);
+                    if ($raw_visits){
+                        $raw_visits = json_decode($raw_visits, true);
+
+                    }
                     //take API calls through all next pages to create remaining visit models
                     while ($raw_visits) {
                         //for each visit on the page
Index: src/cloudbuild.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/cloudbuild.yaml b/src/cloudbuild.yaml
new file mode 100644
--- /dev/null	(date 1677009424997)
+++ b/src/cloudbuild.yaml	(date 1677009424997)
@@ -0,0 +1,4 @@
+steps:
+  # running docker-compose
+  - name: 'docker/compose:1.26.2'
+    args: ['up', '-d']
\ No newline at end of file
Index: src/api/app/settings.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nuse DI\\ContainerBuilder;\r\nuse DPR\\API\\Application\\Settings\\Settings;\r\nuse DPR\\API\\Application\\Settings\\SettingsInterface;\r\nuse Monolog\\Logger;\r\n\r\nreturn function (ContainerBuilder $containerBuilder) {\r\n\r\n    // Global Settings Object\r\n    $containerBuilder->addDefinitions([\r\n        SettingsInterface::class => function () {\r\n            return new Settings([\r\n                'displayErrorDetails' => true, // Should be set to false in production\r\n                'logError' => true,\r\n                'logErrorDetails' => true,\r\n                'logger' => [\r\n                    'name' => 'DPR-API',\r\n                    'path' => isset($_ENV['docker']) ? 'php://stdout' : __DIR__ . '/../logs/app.log',\r\n                    'level' => Logger::DEBUG,\r\n                ],\r\n                'legacy_data_path' => '/legacy_device_data',\r\n                'database' => [\r\n                    'engine' => getenv('DB_ENGINE') ?? null,\r\n                    'host' => getenv('DB_HOST') ?? null,\r\n                    'port' => getenv('DB_PORT') ?? null,\r\n                    'dbname' => getenv('DB_NAME') ?? null,\r\n                    'user' => getenv('DB_USER') ?? null,\r\n                    'password' => getenv('DB_PASSWORD') ?? null,\r\n                    'charset' => getenv('DB_CHARSET') ?? null,\r\n                ],\r\n                'ubidots' => [\r\n                    'apikey' => getenv('UBIDOTS_API_KEY') ?? '',\r\n                    'datasources_url' => getenv('UBIDOTS_DATASOURCES_URL') ?? ''\r\n                ]\r\n            ]);\r\n        }\r\n    ]);\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/api/app/settings.php b/src/api/app/settings.php
--- a/src/api/app/settings.php	(revision 4d2724eb7be00d94f60f4a51d9a4e0bf6da52602)
+++ b/src/api/app/settings.php	(date 1676995652111)
@@ -34,6 +34,10 @@
                 'ubidots' => [
                     'apikey' => getenv('UBIDOTS_API_KEY') ?? '',
                     'datasources_url' => getenv('UBIDOTS_DATASOURCES_URL') ?? ''
+                ],
+                'gcloud' => [
+                    'project_id' => getenv('GOOGLE_CLOUD_PROJECT') ?? '',
+                    'json_keyfile' => getenv('GOOGLE_APPLICATION_CREDENTIALS') ?? ''
                 ]
             ]);
         }
diff --git a/src/api/src/Application/Actions/Visitation/Devices/FetchLegacyVisitsAction.php b/src/api/src/Application/Actions/Visitation/Visits/FetchLegacyVisitsAction.php
rename from src/api/src/Application/Actions/Visitation/Devices/FetchLegacyVisitsAction.php
rename to src/api/src/Application/Actions/Visitation/Visits/FetchLegacyVisitsAction.php
